name: Terraform Destroy CICD

on:
  workflow_dispatch:

jobs:
  terraform_destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Prepare variables
      run: |
        branch_name=$(echo "${GITHUB_REF#refs/heads/}")
        repo_name=$(basename ${{ github.repository }})
        echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
        echo "REPO_NAME=$repo_name" >> $GITHUB_ENV

    - name: Make modify_tfvars.sh executable
      run: chmod +x ./scripts/modify_tfvars.sh

    - name: Run modify_tfvars.sh
      run: ./scripts/modify_tfvars.sh ${{ github.ref_name }} ${{ github.repository }} dev iac/cicd

    - name: Terraform Init
      working-directory: ./cicd
      run: terraform init -input=false

    - name: List Terraform State
      working-directory: ./iac/cicd
      run: terraform state list

    - name: Terraform Destroy with Unstable Behavior
      working-directory: ./iac/cicd
      continue-on-error: true
      run: |
        terraform destroy -auto-approve -var="github_token=${{ secrets.GITHUB_TOKEN }}" | tee destroy_output.txt
        grep "Error" destroy_output.txt || echo "All resources destroyed successfully."
        if grep -q "Error" destroy_output.txt; then
          echo "Some resources could not be destroyed:" >> failed_resources.txt
          grep "Error" destroy_output.txt >> failed_resources.txt
        fi

    - name: Output Failed Resources (If Any)
      if: failure()
      run: |
        echo "The following resources could not be destroyed:"
        cat failed_resources.txt
